// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5124.PowerUp.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5124.PowerUp.Robot;
import org.usfirst.frc5124.PowerUp.RobotMap;

/**
 *
 */
public class MoveWithEncoder extends Command {

	private double WHEEL_CIRCUMFERENCE = 6 * Math.PI;
	private double TICKS_PER_ROTATION = 360;
	private double PULSES_PER_ROTATION = 1440;
	private double PULSES_PER_INCH = PULSES_PER_ROTATION / WHEEL_CIRCUMFERENCE;
    private double power;
    private double pulsesToMove;
    private double pulsesMoved;
    private boolean done;
    public MoveWithEncoder(double inches, double speed) {
    	requires(Robot.driveTrain);
    	pulsesToMove = inches * PULSES_PER_INCH;
    	power = speed;
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	RobotMap.DriveEncoder.reset();
    	done = false;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	pulsesMoved = RobotMap.DriveEncoder.getRaw();
    	if (Math.abs(pulsesMoved) < Math.abs(pulsesToMove)) {
    		Robot.driveTrain.tankDrive(power, power);
    		done = false;
    	}
    	else {
    		done = true;
    		Robot.driveTrain.tankDrive(0, 0);
    	}
    	SmartDashboard.putNumber("DriveEncoder get", RobotMap.DriveEncoder.get());
		SmartDashboard.putNumber("DriveEncoder raw", RobotMap.DriveEncoder.getRaw());
		SmartDashboard.putNumber("DriveEncoder distance", RobotMap.DriveEncoder.getDistance());
		SmartDashboard.putNumber("PulsesToMove", pulsesToMove);
		SmartDashboard.putNumber("PulsesMoved", pulsesMoved);
		SmartDashboard.putNumber("power", power);

    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return done;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {

    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {

    }
}
