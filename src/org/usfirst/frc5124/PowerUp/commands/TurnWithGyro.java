// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5124.PowerUp.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5124.PowerUp.Robot;
import org.usfirst.frc5124.PowerUp.RobotMap;

/**
 *
 */
public class TurnWithGyro extends Command {
	
	private double target;
	private double initialPos;
	private double power;
	private boolean isFinished;
	private boolean wasGreaterThan;
	
    public TurnWithGyro(double degrees, double power) {
    	initialPos = Robot.driveTrain.getGyroAngle();
    	this.power = power;
    	this.target = degrees + initialPos;
    	isFinished = false;
    	wasGreaterThan = degrees > 0;
    	if(degrees == Robot.driveTrain.getGyroAngle()) {
    		isFinished = true;
    	}
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	if(wasGreaterThan ? Robot.driveTrain.getGyroAngle() < target : Robot.driveTrain.getGyroAngle() > target) {
    		Robot.driveTrain.arcadeDrive(0, wasGreaterThan ? 1 : -1);
    	}
    	else {
    		isFinished = true;
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return isFinished;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {

    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {

    }
}
