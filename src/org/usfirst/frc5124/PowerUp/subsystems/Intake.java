// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5124.PowerUp.subsystems;

import org.usfirst.frc5124.PowerUp.RobotMap;
import org.usfirst.frc5124.PowerUp.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.smartdashboard.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Intake extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController foldingMotor = RobotMap.intakeFoldingMotor;
    private final AnalogPotentiometer foldingPotentiometer = RobotMap.intakeFoldingPotentiometer;
    private final PIDController foldingPID = RobotMap.intakeFoldingPID;
    private final SpeedController intakeMotorTwo = RobotMap.intakeIntakeMotorTwo;
    private final SpeedController intakeMotorOne = RobotMap.intakeIntakeMotorOne;
    	private final SpeedControllerGroup intakeGroup = RobotMap.intakeIntakeGroup;
    private final Compressor compressor = RobotMap.intakeCompressor;
    private final DoubleSolenoid grabberDoubleSolenoidOne = RobotMap.intakeGrabberDoubleSolenoidOne;
    private final DoubleSolenoid grabberDoubleSolenoidTwo = RobotMap.intakeGrabberDoubleSolenoidTwo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new IntakeSubCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }
    
    public void setFolderPower (double power) {
    	foldingMotor.set(power);
    }
    
    public void setFoldingPID (double p, double i, double d) {
    	foldingPID.setPID(p, i, d);
    }
    
    public double getFoldingP() {
    	return foldingPID.getP();
    }
    
    public double getFoldingI() {
    	return foldingPID.getI();
    }
    
    public double getFoldingD() {
    	return foldingPID.getD();
    }
    
    public void setFoldingPIDSetpoint (double setpoint) {
    	foldingPID.setSetpoint(setpoint);
    }
    
    public double getFoldingPIDResult() {
    	return foldingPID.get();
    }
    
    public void setIntakePower(double power) {
    	intakeGroup.set(power);
    }
    
    public double getPotentiometerValue() {
    	return foldingPotentiometer.get();
    }
    public void initPIDRange() {
    	foldingPID.setInputRange(-1, 1);
    	foldingPID.setOutputRange(-1, 1);
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

